/*Method 1: 
Idea: Traversal the whole array to find the peak. 
Time complexity: O(n)  
*/
class Solution {
    public int findPeakElement(int[] nums) {
        int index=0;
        if(nums.length==1)
            return 0;
        for(int i=0;i<nums.length;i++)
        {
            if(i==0)
            {
                if(nums[i]>nums[i+1])
                    return i;
            }    
            else if(i==nums.length-1)
            {
                   if(nums[i-1]<nums[i])
                    return i;
            }
            else
            {
                if(nums[i]>nums[i+1]&&nums[i-1]<nums[i])
                    return i;
            }
        }
        return index;
    }
}

/*Method 2: 
Idea: Binary search. 
Time complexity: O(logn)  

class Solution {
    public int findPeakElement(int[] nums) {
        int index=0;
        int left=0;
        int right=nums.length-1;
        while(left<right)
        {
            index=(left+right)/2;
            if(nums[index]<nums[index+1])
                left=index+1;
            else
                right=index;
        }
       
        return left;
    }
}
*/
